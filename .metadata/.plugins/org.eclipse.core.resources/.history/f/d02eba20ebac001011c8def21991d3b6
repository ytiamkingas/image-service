package com.image.service.service;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.image.service.entity.Image;
import com.image.service.entity.User;
import com.image.service.repository.ImageRepository;
import com.image.service.util.FileStorageUtil;
import com.image.service.util.ImageTransformUtil;

@Service
public class ImageService {
	@Autowired
	private FileStorageUtil fileStorageUtil;
	
	@Autowired
	private ImageTransformUtil transformUtil;
	
	@Autowired
	private ImageRepository imageRepository;
	
	public Image uploadImage(MultipartFile file, User user) throws IOException {
		String path = fileStorageUtil.saveFile(file);
		
		Image image = Image.builder()
				.originalName(file.getOriginalFilename())
				.storagePath(path)
				.format(file.getContentType())
				.size(file.getSize())
				.uploadedAt(LocalDateTime.now())
				.user(user)
				.build();
		
		return imageRepository.save(image);
	}
	
	public Optional<Image> getImage(Long id) {
		return imageRepository.findById(id);
	}
	
	public List<Image> listUserImages(User user) {
		return imageRepository.findByUser(user);
	}
	
	public Image transformImage(Long imageId,
								Integer resizeWidth,
								Integer resizeHeight,
								Double rotate,
								Boolean grayscale,
								String format) throws IOException {
		Image original = imageRepository.findById(imageId)
				.orElseThrow(() -> new RuntimeException("Image not found"));
		
		File inputFile = new File(original.getStoragePath());
		String transformedFileName = UUID.randomUUID() + (format != null ? "." + format : ".jpg");
		String outputPath = "uploads/" + transformedFileName;
		
		String savedPath = transformUtil.transformImage(inputFile, 
														outputPath, 
														resizeWidth, 
														resizeHeight, 
														rotate, 
														grayscale, 
														format
		);
		
		Image transformed = Image.builder()
				.originalName(original.getOriginalName())
				.storagePath(savedPath)
				.format(format != null ? format : original.getFormat())
				.size(new File(savedPath).length())
				.uploadedAt(java.time.LocalDateTime.now())
				.user(original.getUser())
				.build();
		
		return imageRepository.save(transformed);
	}
	
}