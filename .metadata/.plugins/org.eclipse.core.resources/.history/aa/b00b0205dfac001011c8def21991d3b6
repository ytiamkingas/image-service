package com.image.service.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.image.service.entity.Image;
import com.image.service.entity.User;
import com.image.service.repository.UserRepository;
import com.image.service.service.ImageService;

@RestController
@RequestMapping("/images")
public class ImageController {
	@Autowired
	private ImageService imageService;
	
	@Autowired
	private UserRepository userRepository;
	
	@PostMapping
	public ResponseEntity<?> uploadImage(@RequestParam("file") MultipartFile file,
										Authentication authentication) throws IOException {
		String username = authentication.getName();
		User user = userRepository.findByUsername(username).orElseThrow();
		Image image = imageService.uploadImage(file, user);
		return ResponseEntity.ok(Map.of(
				"id", image.getId(),
				"originalName", image.getOriginalName(),
				"uploadedAt", image.getUploadedAt()
		));
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<?> getImage(@PathVariable Long id) throws IOException {
		Image image = imageService.getImage(id).orElseThrow(() -> new RuntimeException("Image not found"));
		File file = new File(image.getStoragePath());
		byte[] content = Files.readAllBytes(file.toPath());
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.parseMediaType(image.getFormat()));
		headers.setContentLength(file.length());
		
		return new ResponseEntity<>(content, headers, HttpStatus.OK);
	}
	
	@GetMapping
	public ResponseEntity<?> listImages(Authentication authentication) {
		String username = authentication.getName();
		User user = userRepository.findByUsername(username).orElseThrow();
		List<Image> images = imageService.listUserImages(user);
		
		List<Map<String, Object>> result = new ArrayList<>();
		for (Image img : images) {
			result.add(Map.of(
					"id", img.getId(),
					"originalName", img.getOriginalName(),
					"uploadedAt", img.getUploadedAt()
			));
		}
		
		return ResponseEntity.ok(result);
	}
}